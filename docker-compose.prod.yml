version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nyayamitra-postgres-prod
    environment:
      POSTGRES_DB: nyayamitra
      POSTGRES_USER: nyayamitra_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nyayamitra_user -d nyayamitra"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: nyayamitra-redis-prod
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  # NyayaMitra API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nyayamitra-api-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://nyayamitra_user:${POSTGRES_PASSWORD}@postgres:5432/nyayamitra?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      PICKLEAXE_API_URL: ${PICKLEAXE_API_URL}
      PICKLEAXE_API_KEY: ${PICKLEAXE_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - internal
      - external

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: nyayamitra-frontend-prod
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - external

  # Job Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nyayamitra-worker-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nyayamitra_user:${POSTGRES_PASSWORD}@postgres:5432/nyayamitra?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      PICKLEAXE_API_URL: ${PICKLEAXE_API_URL}
      PICKLEAXE_API_KEY: ${PICKLEAXE_API_KEY}
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: ["npm", "run", "worker"]
    restart: unless-stopped
    networks:
      - internal

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nyayamitra-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - api
    restart: unless-stopped
    networks:
      - external

volumes:
  postgres_prod_data:
  redis_prod_data:
  nginx_logs:

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge